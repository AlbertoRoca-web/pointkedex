name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read        # for actions/checkout
  id-token: write       # for azure/login OIDC

env:
  WEBAPP_NAME: Pup-Cloud2           # exact name of the Web App in ARM
  RESOURCE_GROUP: Pup-Cloud2_group  # exact resource group
  ACR_NAME: pupcloud2               # short name (no .azurecr.io)
  IMAGE_REPO: pup-cloud2            # repository inside ACR
  TAG_NAME: alroca                 # GitHub Release tag holding model
  ASSET_FILE: pokedex_resnet50.h5   # model asset name

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üîë Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üê≥ Login to ACR using federated identity
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

          docker build \
            --build-arg MODEL_URL="$MODEL_URL" \
            --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
            -t "$FULL_IMAGE" .

          docker push "$FULL_IMAGE"
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

      - name: üõ†Ô∏è Ensure Web App + Plan exist
        run: |
          az group create -n ${{ env.RESOURCE_GROUP }} -l canadacentral

          az appservice plan create \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.WEBAPP_NAME }}-plan \
            --is-linux --sku B1 || true

          az webapp create \
            -g ${{ env.RESOURCE_GROUP }} \
            -p ${{ env.WEBAPP_NAME }}-plan \
            -n ${{ env.WEBAPP_NAME }} \
            --deployment-container-image-name "${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}@${{ github.sha }}" || true

      - name: ‚è≥ Wait for ARM cache propagation
        run: sleep 30

      - name: üîÑ Configure Web App to use the pushed image (managed identity)
        run: |
          az webapp config container set \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io

      - name: üîë Assign AcrPull role to Web App's system identity
        run: |
          PRINCIPAL_ID=$(az webapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME }} --query identity.principalId -o tsv)
          ACR_ID=$(az acr show -n ${{ env.ACR_NAME }} --query id -o tsv)
          az role assignment create \
            --assignee "$PRINCIPAL_ID" \
            --role acrpull \
            --scope "$ACR_ID" || true

      - name: üöÄ Trigger deployment (restart to pick up container config)
        run: |
          az webapp restart -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME }}

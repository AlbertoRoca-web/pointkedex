# .github/workflows/deploy_container.yml
name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read   # for actions/checkout
  id-token: write  # for Azure OIDC login

env:
  WEBAPP_NAME: Pup-Cloud2     # your App Service for Containers name
  ACR_LOGIN: ${{ secrets.ACR_NAME }}.azurecr.io

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Sign in to Azure (OIDC)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3️⃣ Build the Docker image
      - name: Build Docker image
        run: |
          docker build \
            -t $ACR_LOGIN/${{ env.WEBAPP_NAME }}:${{ github.sha }} \
            .

      # 4️⃣ Log in to ACR
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: $ACR_LOGIN
          client-id:    ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:    ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 5️⃣ Push the image
      - name: Push image to ACR
        run: |
          docker push $ACR_LOGIN/${{ env.WEBAPP_NAME }}:${{ github.sha }}

      # 6️⃣ Tell your Web App to pull & run that image
      - name: Deploy to Azure Web App for Containers
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          images:   $ACR_LOGIN/${{ env.WEBAPP_NAME }}:${{ github.sha }}

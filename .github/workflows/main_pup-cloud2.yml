# .github/workflows/main_pup-cloud2.yml
name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read      # for actions/checkout
  id-token: write     # if you ever switch back to OIDC

env:
  WEBAPP_NAME: pup-cloud2       # exact Web App name, lowercase
  ACR_NAME:    pupcloud2        # your ACR short name (no ‚Äú.azurecr.io‚Äù)
  IMAGE_REPO:  pup-cloud2       # repo inside ACR (must be lowercase)
  TAG_NAME:    alroca           # your _exact_ GitHub Release tag

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout all your code (no LFS; model comes via Dockerfile)
      - name: üìÇ Checkout code
        uses: actions/checkout@v4

      # 2) Azure login (SPN + secret)
      - name: üîë Azure login (SPN + secret)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret:   ${{ secrets.AZURE_CLIENT_SECRET }}

      # 3) Login to ACR via Azure CLI (so `docker push` works)
      - name: üê≥ ACR login
        run: az acr login --name ${{ env.ACR_NAME }}

      # 4) Build & push Docker image (inject TAG_NAME into the build)
      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          docker build \
            --build-arg TAG_NAME=${{ env.TAG_NAME }} \
            -t "$FULL_IMAGE" .
          docker push "$FULL_IMAGE"

      # 5) Deploy that image to your Web App for Containers
      - name: üöÄ Deploy to Web App for Containers
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          images:   ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

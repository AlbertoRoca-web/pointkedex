# ------------------------------
#  GitHub Actions: Build & Deploy Docker image to Azure Web App for Containers
# ------------------------------
#   ‚Ä¢ Builds the Docker image, tagging it with the commit SHA
#   ‚Ä¢ Pushes the image to Azure Container Registry (ACR)
#   ‚Ä¢ Ensures the App Service (Linux) exists in the target resource‚Äëgroup
#   ‚Ä¢ Deploys the new image via the azure/webapps‚Äëdeploy action
#
#   This file fuses the last known‚Äëgood pipeline with the new logic.
#   No original behaviour is removed; only secure/fault‚Äëtolerant steps are added.
# ------------------------------

name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read        # for actions/checkout
  id-token: write       # for azure/login OIDC

env:
  WEBAPP_NAME: pup-cloud2           # exact site name (Azure is case‚Äëinsensitive)
  RESOURCE_GROUP: Pup-Cloud2_group  # resource group holding the site
  LOCATION: canadacentral           # region for one‚Äëoff creation
  ACR_NAME:    pupcloud2            # ACR short name (no .azurecr.io)
  IMAGE_REPO:  pup-cloud2           # repo name inside ACR
  TAG_NAME:    alroca               # GitHub Release tag holding the model asset
  ASSET_FILE:  pokedex_resnet50.h5
  # --- legacy credentials kept for backwards‚Äëcompatibility ---
  ACR_USERNAME: PupCloud2
  ACR_PASSWORD: Vb1JK69MXN4EtFrCtHx8jOoEo9hwvF2jdcboOYkQ9d+ACRBDo0Wj

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout the code
      - name: üìÇ Checkout repo
        uses: actions/checkout@v4

      # 2) Azure login (OIDC)
      - name: üîë Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3) ACR login ‚Äì prefer OIDC; fall back to docker login with password if needed
      - name: üê≥ ACR login
        run: |
          set -e
          if ! az acr login --name ${{ env.ACR_NAME }}; then
            echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.ACR_NAME }}.azurecr.io \
              --username "${{ env.ACR_USERNAME }}" --password-stdin
          fi

      # 4) Build & push Docker image
      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

          docker build \
            --build-arg MODEL_URL="$MODEL_URL" \
            --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
            -t "$FULL_IMAGE" .
          docker push "$FULL_IMAGE"

          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

      # 5) Ensure the Web App & plan exist (safe to re‚Äërun)
      - name: üõ†Ô∏è Ensure Web App exists
        run: |
          az group create -n ${{ env.RESOURCE_GROUP }} -l ${{ env.LOCATION }} || true

          az appservice plan create \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.WEBAPP_NAME }}-plan \
            --is-linux --sku B1 || true

          az webapp create \
            -g ${{ env.RESOURCE_GROUP }} \
            -p ${{ env.WEBAPP_NAME }}-plan \
            -n ${{ env.WEBAPP_NAME }} \
            --deployment-container-image-name "$FULL_IMAGE" || true

      # 6) Wait for ACR metadata propagation (kept at 120‚ÄØs as in last working run)
      - name: ‚è≥ Wait for Azure to refresh resource cache
        run: sleep 120

      # 7) Deploy the freshly‚Äëpushed image
      - name: üöÄ Deploy to Web¬†App for Containers
        uses: azure/webapps-deploy@v3
        with:
          app-name:             ${{ env.WEBAPP_NAME }}
          resource-group-name:  ${{ env.RESOURCE_GROUP }}
          images:               ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

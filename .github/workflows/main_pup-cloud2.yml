# .github/workflows/main_pup-cloud2.yml
name: Build & Deploy Docker to Azure Web App

# Trigger on push to main or via manual dispatch
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read      # for actions/checkout
  id-token: write     # in case you switch back to OIDC-based login

env:
  WEBAPP_NAME: pup-cloud2       # Exact name of your Azure Web App
  ACR_NAME:    pupcloud2        # Your ACR short name (no ‚Äú.azurecr.io‚Äù)
  IMAGE_REPO:  pup-cloud2       # Lowercase repo inside ACR
  TAG_NAME:    alroca           # The exact GitHub Release tag
  ASSET_FILE:  pokedex_resnet50.h5  # Name of the .h5 asset in that release

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your application code (no LFS needed‚Äîmodel comes from the release)
      - name: üìÇ Checkout code
        uses: actions/checkout@v4

      # 2) Pull the .h5 model from your GitHub Release
      - name: üì• Download model asset from Release
        uses: robinraju/release-downloader@v1.9
        with:
          repository:    ${{ github.repository }}
          tag:           ${{ env.TAG_NAME }}
          fileName:      ${{ env.ASSET_FILE }}
          out-file-path: ./      # places pokedex_resnet50.h5 beside the Dockerfile

      # 3) Login to Azure using your Service Principal + secret
      - name: üîë Azure login (SPN + secret)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret:   ${{ secrets.AZURE_CLIENT_SECRET }}

      # 4) Login to ACR so docker push can authenticate
      - name: üê≥ ACR login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io

      # 5) Build & push your Docker image
      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          docker build -t "$FULL_IMAGE" .
          docker push "$FULL_IMAGE"

      # 6) Deploy that image to your Web App for Containers
      - name: üöÄ Deploy to Web App for Containers
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          images:   ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

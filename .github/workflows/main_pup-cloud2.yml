name: Build & Deploy Docker to Azure Web App (MI)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read        # checkout
  id-token: write       # OIDC for azure/login

env:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Azure resource names ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  WEBAPP_NAME:      Pup-Cloud2
  RESOURCE_GROUP:   Pup-Cloud2_group
  ACR_NAME:         pupcloud2              # ‚Üñ short name (no .azurecr.io)
  IMAGE_REPO:       pup-cloud2

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Model release info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  TAG_NAME:         alroca
  ASSET_FILE:       pokedex_resnet50.h5

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ User-assigned identity ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  UMI_RESOURCE_ID:  /subscriptions/a30eb1d2-c757-4f30-9e92-74bddc0063a2/resourceGroups/Pup-Cloud2_group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/pupcloud2-umi

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£  Checkout
    - name: üìÇ Checkout repository
      uses: actions/checkout@v4

    # 2Ô∏è‚É£  Azure login via federated OIDC
    - name: üîë Azure login (OIDC)
      uses: azure/login@v2
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # 3Ô∏è‚É£  Log in to ACR (push only)
    - name: üê≥ ACR login
      run: az acr login --name ${{ env.ACR_NAME }}

    # 4Ô∏è‚É£  Build & push container
    - name: üèóÔ∏è Build & push Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG
        MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

        docker build \
          --build-arg MODEL_URL="$MODEL_URL" \
          --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
          -t "$FULL_IMAGE" .
        docker push "$FULL_IMAGE"
        echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

    # 5Ô∏è‚É£  Attach the user-assigned identity to the Web App (safe to re-run)
    - name: üÜî Attach UMI to Web App
      run: |
        az webapp identity assign \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --identities ${{ env.UMI_RESOURCE_ID }}

    # 6Ô∏è‚É£  Ensure the identity can pull from ACR (AcrPull role)
    - name: üîë Grant AcrPull to UMI
      run: |
        PRINCIPAL_ID=$(az identity show --ids ${{ env.UMI_RESOURCE_ID }} --query principalId -o tsv)
        ACR_ID=$(az acr show -n ${{ env.ACR_NAME }} --query id -o tsv)
        az role assignment create \
          --assignee $PRINCIPAL_ID \
          --role "AcrPull" \
          --scope $ACR_ID || true   # ‚Üê idempotent

    # 7Ô∏è‚É£  Configure the Web App to use the image **and** the identity
    - name: üîÑ Configure Web App container settings
      run: |
        az webapp config container set \
          --name  ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name $FULL_IMAGE \
          --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io \
          --acr-use-managed-identity true \
          --acr-user-assigned-identity ${{ env.UMI_RESOURCE_ID }}

    # 8Ô∏è‚É£  Small delay ‚Äì let ARM propagate
    - name: ‚è≥ ARM cache flush
      run: sleep 30

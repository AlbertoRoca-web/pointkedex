name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read        # checkout
  id-token: write       # future OIDC if desired

env:
  WEBAPP_NAME: pup-cloud2        # Azure Web‚ÄØApp (lower‚Äëcase)
  ACR_NAME:    pupcloud2         # ACR short name (no .azurecr.io)
  IMAGE_REPO:  pup-cloud2        # repo name inside ACR
  TAG_NAME:    alroca            # exact GitHub Release tag
  ASSET_FILE:  pokedex_resnet50.h5
  ACR_USERNAME: PupCloud2
  ACR_PASSWORD: Vb1JK69MXN4EtFrCtHx8jOoEo9hwvF2jdcboOYkQ9d+ACRBDo0Wj

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) Code checkout (no LFS; model is downloaded later)
    - name: üìÇ Checkout repo
      uses: actions/checkout@v4

    # 2) Azure login ‚Äì use OIDC (no secret) OR SPN‚Äësecret via AZURE_CREDENTIALS
    - name: üîë Azure login (OIDC)
      uses: azure/login@v2
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret:   ${{ secrets.AZURE_CLIENT_SECRET }}

    # 3) ACR login (CLI) so docker push can authenticate
    - name: üê≥ ACR login
      run: |
        echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.ACR_NAME }}.azurecr.io \
          --username "${{ env.ACR_USERNAME }}" --password-stdin

    # 4) Build & push container ‚îÄ we compute MODEL_URL once and pass it in
    - name: üèóÔ∏è Build & push Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

        MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

        docker build \
          --build-arg MODEL_URL="$MODEL_URL" \
          --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
          -t "$FULL_IMAGE" .
        docker push "$FULL_IMAGE"

    # 5) Deploy the freshly‚Äëpushed image
    - name: üöÄ Deploy to Web¬†App for Containers
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        images:   ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

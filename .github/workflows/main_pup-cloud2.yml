# -----------------------------------------------------------
#  GitHub Actions ‚Äì Build & Deploy Docker image to Azure App Service (Linux Container)
# -----------------------------------------------------------
#  ‚ñ∏ Builds a Docker image and pushes it to Azure Container Registry (ACR)
#  ‚ñ∏ Switches / updates the Web App to run that image
#  ‚ñ∏ Grants the Web App‚Äôs managed identity AcrPull permission (idempotent)
# -----------------------------------------------------------

name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read           # actions/checkout
  id-token: write          # azure/login (OIDC)

env:
  # ---------- Global identifiers ----------
  WEBAPP_NAME:   Pup-Cloud2          # exact App Service name (case-sensitive)
  RESOURCE_GROUP: Pup-Cloud2_group   # resource-group that owns the site
  ACR_NAME:      pupcloud2           # ACR login server prefix (no .azurecr.io)
  IMAGE_REPO:    pup-cloud2          # repository inside ACR
  # ---------- Model asset ----------
  TAG_NAME:      alroca              # GitHub Release tag that stores the model
  ASSET_FILE:    pokedex_resnet50.h5 # file to download during docker build

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # 1 ‚Äì Checkout source
    - name: üìÇ Checkout repository
      uses: actions/checkout@v4

    # 2 ‚Äì Azure login (OIDC)
    - name: üîë Azure login (OIDC)
      uses: azure/login@v2
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # 3 ‚Äì Login to ACR using the federated identity
    - name: üê≥ ACR login
      run: az acr login --name ${{ env.ACR_NAME }}

    # 4 ‚Äì Build and push Docker image
    - name: üèóÔ∏è Build & push Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG
        MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

        docker build \
          --build-arg MODEL_URL="$MODEL_URL" \
          --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
          -t "$FULL_IMAGE" .

        docker push "$FULL_IMAGE"
        echo "FULL_IMAGE=$FULL_IMAGE" >> "$GITHUB_ENV"

    # 5 ‚Äì Configure the Web App to use the container image (runs safely every time)
    - name: üîÑ Configure Web App for container image
      run: |
        az webapp config container set \
          --name "$WEBAPP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --docker-custom-image-name "$FULL_IMAGE" \
          --docker-registry-server-url "https://${{ env.ACR_NAME }}.azurecr.io"

    # 6 ‚Äì Grant AcrPull to the Web App‚Äôs managed identity (idempotent)
    - name: üîë Grant AcrPull role to Web App identity
      run: |
        PRINCIPAL_ID=$(az webapp show -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" --query identity.principalId -o tsv)
        ACR_ID=$(az acr show -n "$ACR_NAME" --query id -o tsv)

        # create role assignment if it doesn‚Äôt exist
        az role assignment create \
          --assignee "$PRINCIPAL_ID" \
          --role "acrpull" \
          --scope "$ACR_ID" || true

    # 7 ‚Äì Small delay to let ARM propagate settings
    - name: ‚è≥ Wait for ARM propagation
      run: sleep 30

    # 8 ‚Äì Tell App Service to restart on the new image
    - name: üöÄ Deploy (trigger restart)
      uses: azure/webapps-deploy@v3
      with:
        app-name:            ${{ env.WEBAPP_NAME }}
        resource-group-name: ${{ env.RESOURCE_GROUP }}
        images:              ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

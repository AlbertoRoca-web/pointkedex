name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read        # for actions/checkout
  id-token: write       # for azure/login OIDC

env:
  WEBAPP_NAME: Pup-Cloud2          # ‚Ü≥ **exact** Site name (see Azure portal)
  RESOURCE_GROUP: Pup-Cloud2_group # ‚Ü≥ Resource-group that owns the site
  ACR_NAME: pupcloud2              # ‚Ü≥ ACR short name (no .azurecr.io)
  IMAGE_REPO: pup-cloud2           # ‚Ü≥ repo inside ACR
  TAG_NAME: alroca                # ‚Ü≥ GitHub Release tag that holds the model asset
  ASSET_FILE: pokedex_resnet50.h5  # ‚Ü≥ asset name stored in the release

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout the code
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      # 2) Azure login via OpenID Connect (no secrets needed)
      - name: üîë Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3) ACR login using the federated identity
      - name: üê≥ ACR login
        run: az acr login --name ${{ env.ACR_NAME }}

      # 4) Build & push the Docker image
      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          MODEL_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/${{ env.ASSET_FILE }}"

          docker build \
            --build-arg MODEL_URL="$MODEL_URL" \
            --build-arg ASSET_FILE="${{ env.ASSET_FILE }}" \
            -t "$FULL_IMAGE" .

          docker push "$FULL_IMAGE"
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

      # 5) (Optional one-off) Ensure the App Service exists ‚Äî safe to re-run
      - name: üõ†Ô∏è Ensure Web App exists
        run: |
          az group create -n ${{ env.RESOURCE_GROUP }} -l canadacentral

          az appservice plan create \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.WEBAPP_NAME }}-plan \
            --is-linux --sku B1 || true

          az webapp create \
            -g ${{ env.RESOURCE_GROUP }} \
            -p ${{ env.WEBAPP_NAME }}-plan \
            -n ${{ env.WEBAPP_NAME }} \
            --deployment-container-image-name "$FULL_IMAGE" || true

      # 6) Short wait to let ARM cache propagate
      - name: ‚è≥ Wait for ARM cache flush
        run: sleep 30

      # 7) Deploy the freshly-pushed image
      - name: üöÄ Deploy container to Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name:             ${{ env.WEBAPP_NAME }}
          resource-group-name:  ${{ env.RESOURCE_GROUP }}
          images:               ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}

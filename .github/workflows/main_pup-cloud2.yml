name: Build & Deploy Docker to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read      # required for actions/checkout
  id-token: write     # required to mint OIDC tokens (if you switch to OIDC)

env:
  WEBAPP_NAME: pup-cloud2    # exact Azure Web App name (lowercase!)
  ACR_NAME:    pupcloud2     # your ACR short name (no ‚Äú.azurecr.io‚Äù)
  IMAGE_REPO:  pup-cloud2    # repository name inside ACR

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Grab your application (no LFS needed)
      - name: üìÇ Checkout code
        uses: actions/checkout@v4

      # 2) Login to Azure using a Service Principal secret
      #    (AZURE_CREDENTIALS = JSON with clientId, clientSecret, subscriptionId, tenantId)
      - name: üîë Azure login (SPN + secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3) Login to ACR so that `docker push` can authenticate
      - name: üê≥ ACR login via Azure CLI
        run: az acr login --name ${{ env.ACR_NAME }}

      # 4) Build & push your image
      - name: üèóÔ∏è Build & push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:$IMAGE_TAG

          docker build -t "$FULL_IMAGE" .
          docker push    "$FULL_IMAGE"

      # 5) Deploy that image to your Web App for Containers
      - name: üöÄ Deploy to Web App for Containers
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          images:   ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_REPO }}:${{ github.sha }}
